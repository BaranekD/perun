<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
">

	<!-- needs perun-core.xml and perun-tasks-lib.xml loaded before this file -->

	<!-- Scans for @Repository, @Service and @Component -->
	<context:component-scan base-package="cz.metacentrum.perun.dispatcher"/>
	<context:component-scan base-package="cz.metacentrum.perun.controller"/>

	<!-- Enable @AspectJ support -->
	<aop:aspectj-autoproxy/>

	<!-- Enable @Transactional support -->
	<tx:annotation-driven transaction-manager="perunTransactionManager"/>

	<!-- Transaction management using springTransactionManager -->
	<tx:advice id="txAdvice" transaction-manager="perunTransactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>

	<!-- THIS BEAN STARTS THE WHOLE DISPATCHER COMPONENT -->
	<bean id="dispatcherStarter" class="cz.metacentrum.perun.dispatcher.main.DispatcherStarter" init-method="init"/>

	<!-- Beans -->
	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="10"/>
		<property name="maxPoolSize" value="50"/>
		<property name="queueCapacity" value="100"/>
	</bean>

	<!-- DAOs -->
	<bean id="dispatcherDao" class="cz.metacentrum.perun.dispatcher.dao.jdbc.DispatcherDaoJdbc">
		<property name="dataSource" ref="dataSource"/>
	</bean>

	<bean id="rulesDao" class="cz.metacentrum.perun.dispatcher.dao.jdbc.RulesDaoJdbc">
		<property name="dataSource" ref="dataSource"/>
	</bean>

	<bean id="processingRuleDao" class="cz.metacentrum.perun.dispatcher.dao.jdbc.ProcessingRuleDaoJdbc">
		<property name="dataSource" ref="dataSource"/>
	</bean>

	<!-- Quartz jobs definition - they are not started unless perun-dispatcher-scheduler.xml is imported to context -->

	<bean id="maintenanceJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass" value="cz.metacentrum.perun.dispatcher.job.MaintenanceJob"/>
		<property name="jobDataAsMap">
			<map>
				<entry key="schedulingPool" value-ref="schedulingPool"/>
			</map>
		</property>
	</bean>

	<bean id="maintenanceJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="maintenanceJob"/>
		<property name="cronExpression" value="${dispatcher.cron.maintenance}"/>
	</bean>

	<bean id="propagationMaintainerJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass" value="cz.metacentrum.perun.dispatcher.job.PropagationMaintainerJob"/>
		<property name="jobDataAsMap">
			<map>
				<entry key="propagationMaintainer" value-ref="propagationMaintainer"/>
			</map>
		</property>
	</bean>

	<bean id="propagationMaintainerJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="propagationMaintainerJob"/>
		<property name="cronExpression" value="${dispatcher.cron.propagation}"/>
	</bean>

	<bean id="processPoolJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass" value="cz.metacentrum.perun.dispatcher.job.ProcessPoolJob"/>
		<property name="jobDataAsMap">
			<map>
				<entry key="taskScheduler" value-ref="taskScheduler"/>
			</map>
		</property>
	</bean>

	<bean id="processPoolJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="processPoolJob"/>
		<property name="cronExpression" value="${dispatcher.cron.processpool}"/>
	</bean>

	<bean id="cleanTaskResultsJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass" value="cz.metacentrum.perun.dispatcher.job.CleanTaskResultsJob"/>
		<property name="jobDataAsMap">
			<map>
				<entry key="dispatcherManager" value-ref="dispatcherManager"/>
			</map>
		</property>
	</bean>

	<bean id="cleanTaskResultsJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="cleanTaskResultsJob"/>
		<property name="cronExpression" value="${dispatcher.cron.cleantaskresults}"/>
	</bean>

	<!-- END of quartz jobs definition -->

	<!-- Dispatcher properties -->

	<!-- default properties values in all Spring profiles-->
	<bean id="dispatcherDefaultProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="properties">
			<props>
				<prop key="perun.principal.name">perunDispatcher</prop>
				<prop key="perun.principal.extSourceName">INTERNAL</prop>
				<prop key="perun.principal.extSourceType">cz.metacentrum.perun.core.impl.ExtSourceInternal</prop>
				<prop key="dispatcher.cron.propagation">45 0/2 * * * ?</prop>
				<prop key="dispatcher.cron.processpool">0 0/1 * * * ?</prop>
				<prop key="dispatcher.cron.cleantaskresults">0 0 1 * * ?</prop>
				<prop key="dispatcher.cron.maintenance">0 0 0/2 * * ?</prop>
				<prop key="dispatcher.datadir">/tmp/perun-dispatcher-data</prop>
			</props>
		</property>
	</bean>
	
	<!-- pass properties values to Spring placeholders i.e. ${dispatcher.cron.cleantaskresults} -->
	<context:property-placeholder properties-ref="dispatcherPropertiesBean"	ignore-unresolvable="true"/>

	<!-- active in Spring profiles "devel" and "production", packs default properties with properties from files as a bean -->
	<beans profile="devel,production">
		<bean id="dispatcherPropertiesBean" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
			<property name="properties" ref="dispatcherDefaultProperties"/>
			<property name="locations">
				<list>
					<value>file:@perun.conf@perun-dispatcher.properties</value>
					<value>file:${perun.conf.custom}perun-dispatcher.properties</value>
				</list>
			</property>
			<property name="ignoreResourceNotFound" value="true"/>
		</bean>
	</beans>

	<!-- active in Spring profile "default", packs just default properties as a bean -->
	<beans profile="default">
		<bean id="dispatcherPropertiesBean" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
			<property name="properties" ref="dispatcherDefaultProperties"/>
		</bean>
	</beans>


</beans>
